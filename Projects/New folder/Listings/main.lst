A51 MACRO ASSEMBLER  MAIN                                                                 10/24/2020 17:07:21 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\Objects\m
                      ain.obj) EP

LOC  OBJ            LINE     SOURCE

  002F                 1     Cel DATA 2Fh
  0025                 2     Begin DATA 25h
  000A                 3     IleStalych EQU 10
  0003                 4     Maska DATA 03h
                       5     
                       6     
----                   7     CSEG AT 0
0000 2100              8     JMP start
                       9     
----                  10     CSEG AT 50h
0050 04050303         11     stale: db 4, 5, 3, 3, 3, 4, 6, 2, 6, 5 ; umieszczamy stale w pamieci kodu zaczynajac od adr
                             esu 50h
0054 03040602                
0058 0605                    
                      12     
----                  13     CSEG AT 100h
0100                  14     start:
                      15             ; ladowanie danych do RAM, takie samo jak w poprzednim zadaniu
0100 782F             16             MOV R0, #Cel                    ;zaladuj wartosc Cel do R1 (wskaznik na dane w RAM(
                             koniec tablicy))
0102 7A0A             17             MOV R2, #IleStalych             ;zaladuj wartosc IleStalych, ktora bedzie liczyc il
                             e stalych w pamieci kodu zostalo do skopiowania
0104 900050           18             MOV DPTR, #stale                ;do wskaznika danych odczytujacego z pamieci kodu D
                             PTR zaladuj adres stalych
0107                  19             loop:
0107 EA               20                     MOV A, R2                       ;zaladuj ilosc pozostalych stalych do A
0108 14               21                     DEC A                           ;adres wzgledny musi miec wartosc od 0-7 a 
                             nie 1-8. Dlatego dekrementuejmy wartosc A
                      22                     ;teraz w A jest adres (wzgledem DPTR) ostatniej nieskopiowanej stalej
0109 93               23                     MOVC A, @A+DPTR         ;zapisz do A wartosc pod adresem A+DPTR (A+stale) w
                              pamieci kodu
010A F6               24                     MOV @R0, A                      ;przenies dane do pamieci RAM
010B 18               25                     DEC R0                          ;przenies wskaznik R1 na poprzedni adres w 
                             pamieci RAM
010C DAF9             26               DJNZ R2, loop                 ;zmniejsz wartosc R2 (ilosc danych). Jesli wyniesie
                              zero to zakoncz pentle. Jesli nie skocz do etykiety loop
                      27             
                      28             
010E 7825             29             MOV R0, #Begin                  ;R0 wskazuje tuz przed poczatek tablicy
0110 7925             30             MOV R1, #Begin          
0112 09               31             INC R1
0113 09               32             INC R1  
0114 09               33             INC R1          ;R1 wskazuje na 3 element tablicy
0115                  34             loop2:
0115 08               35                     INC R0                          ;W pierwszym wykonaniu petli R0 wskazuje na
                              poczatek tablicy
0116 09               36                     INC R1                          ;W pierwszym wykonaniu petli R1 wskazuje na
                              4 element tablicy
0117 E6               37                     MOV A, @R0                      
0118 27               38                     ADD A, @R1                      ;Dodajemy odpowiednie poprzednie wyrazy opo
                             znionego ciagu Fibbonaciego
0119 5403             39                     ANL A, #Maska           ;Maska izoluje 2 ostatnie bity ktore sa rowne A mod
                              4
011B 00               40                     NOP                             ;W tym miejscu odczytujemy liczbe pseudolos
                             owa z A
011C F6               41                     MOV @R0, A                      ;Tego wyrazu juz nie bedziemy uzywac wiec z
                             astepujemy go nowo wyliczonym(*)
A51 MACRO ASSEMBLER  MAIN                                                                 10/24/2020 17:07:21 PAGE     2

                      42                     
                      43                     ; (*)Reszta z sumy dwoch wyrazow jest rowna sumie reszt tych wyrazow,
                      44                     ; zatem mozemy dla uproszczenia i zeby nie przepelnic pamieci operowac na s
                             amych resztach
                      45                     
                      46                     ; Warunek sprawdzajacy czy nie przekroczylismy zakresu tablicy i ustawiajac
                             y wskazniki spowrotem na poczatek jesli trzeba
011D B92F04           47                     CJNE R1, #Cel, warunek2         ;       if(R1==Cel){
0120 7925             48                             MOV R1, #Begin                  ;               R1 = Begin;
0122 80F1             49                     JMP loop2                                       ;       
0124                  50                     warunek2:                                       ;       }
0124 B82FEE           51                     CJNE R0, #Cel, loop2            ;   else if(R0==Cel) {
0127 7825             52                             MOV R0, #Begin                  ;               R0 = Begin;
0129 80EA             53                     JMP loop2                                       ;       }
                      54             
                      55     END
                                     
                             
                                     
A51 MACRO ASSEMBLER  MAIN                                                                 10/24/2020 17:07:21 PAGE     3

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

BEGIN. . . . . . .  D ADDR   0025H   A   
CEL. . . . . . . .  D ADDR   002FH   A   
ILESTALYCH . . . .  N NUMB   000AH   A   
LOOP . . . . . . .  C ADDR   0107H   A   
LOOP2. . . . . . .  C ADDR   0115H   A   
MASKA. . . . . . .  D ADDR   0003H   A   
STALE. . . . . . .  C ADDR   0050H   A   
START. . . . . . .  C ADDR   0100H   A   
WARUNEK2 . . . . .  C ADDR   0124H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
